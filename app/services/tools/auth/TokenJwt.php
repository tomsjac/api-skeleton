<?php

namespace App\services\tools\auth;

use DateTime;
use Exception;
use Firebase\JWT\JWT;
use Tuupola\Base62;

/**
 * Option to the token generated by JWT
 * @author Thomas
 */
class TokenJwt implements Itoken
{
    /**
     * Token decoded
     * @var Object
     */
    protected $decoded;

    /**
     * Updating the token
     * @param object|array $decoded
     */
    public function hydrate($decoded)
    {
        $decoded = is_array($decoded) ? (object)$decoded : $decoded;
        $this->decoded = $decoded;
    }

    /**
     * Raw Datas
     * @return Object
     */
    public function getRaw()
    {
        return $this->decoded;
    }

    /**
     * Return the datas of the token
     * @return array
     */
    public function getData()
    {
        return $this->decoded->data;
    }

    /**
     * Return the scope of the token
     * @return array
     */
    public function getScope()
    {
        return $this->decoded->scope;
    }

    /**
     * Return the expiration date of the token
     * @return string
     */
    public function getExpired()
    {
        return $this->decoded->exp;
    }

    /**
     * Return the creation date  of the token
     * @return string
     */
    public function getCreate()
    {
        return $this->decoded->iat;
    }

    /**
     * Check init Token
     * @return bool
     */
    public function isInit()
    {
        return (is_null($this->decoded) == true) ? false : true;
    }

    /**
     * check the scope, if authorized
     * @param array $scope
     * @return bool
     */
    public function hasScope(array $scope)
    {
        return !!count(array_intersect($scope, $this->decoded->scope));
    }


    /**
     *  it generates the token JWT
     * @param array $data Data in Token
     * @param array $scope permission to access
     * @param integer $expire expiration timestamp
     * @param string $secret paraphrase
     * @return string
     * @throws Exception
     */
    public static function generate(array $data, array $scope, int $expire, string $secret)
    {
        $now = new DateTime();
        $base62 = new Base62;
        $jti = $base62->encode(random_bytes(16));

        $payload = [
            "iat" => $now->getTimeStamp(),
            "exp" => $expire,
            "jti" => $jti,
            "data" => $data,
            "scope" => $scope
        ];

        return JWT::encode($payload, $secret, "HS256");
    }
}
